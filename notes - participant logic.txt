participant logic by type of conversation
case 1: simple dm conversation. both participants should be registered as joining at the start of the conversation and not leaving but like having the participants entries is only for tidiness' sake. the participants will be registered when the first message from their convo comes through; the conversation record will be updated to show it as starting at their first message when it's selected as having a null "join" time in finalize(); the participants' start_times will be set in the "finalize" method when they're selected as having no start times in finalize.
case 2: group conversation that you were added to. the conversation join_time and the snapshotted participants' start_times as well as your own should be set when the joinConversation event is received from the message stream; other participants will be added to the table when the first message or event that mentions them comes up and updated to have a specific start. participantsJoin and participantsLeave events result in the obvious additions of their timestamps to the database, not to mention adding their participants table entries in the first place if necessary. this is the case where automatic addition of participants from normal messages is the least necessary; just keep in mind that most of these conversation events will result in updates rather than inserts.
case 3: group conversation that you created. this case requires participants to be detected from messages that they send, since there is no joinConversation event that provides a snapshot of the conversations' initial members; participantsJoin and participantsLeave events should be handled as in the above case, and then any participants that don't have a join_time timestamp by the time finalize() is called can be assumed to have "always been there" and their join_time timestamps should be set to their conversation's join_time.
